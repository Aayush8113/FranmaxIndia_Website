{"version":3,"file":"static/js/2088.7da799e4.chunk.js","mappings":"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","sources":["admin/LeaseProperties.jsx","admin/AssignModal.jsx"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import './LeaseProperties.css';\r\n// import Sidebar from './Sidebar';\r\n// import { getApiUrl } from '../utils/api';\r\n\r\n// const LeaseProperties = () => {\r\n//     // State to hold the fetched data\r\n//     const [properties, setProperties] = useState([]);\r\n//     // State to manage which row's details are expanded\r\n//     const [expandedRowId, setExpandedRowId] = useState(null);\r\n//     // State to handle loading and errors\r\n//     const [isLoading, setIsLoading] = useState(true);\r\n//     const [error, setError] = useState(null);\r\n\r\n//     // Fetch data from the API on component mount\r\n//     useEffect(() => {\r\n//         const apiUrl = getApiUrl('get-lease-properties.php');\r\n\r\n//         fetch(apiUrl)\r\n//             .then(res => {\r\n//                 if (!res.ok) {\r\n//                     throw new Error('Network response was not ok');\r\n//                 }\r\n//                 return res.json();\r\n//             })\r\n//             .then(data => {\r\n//                 if (data.status === \"success\" && Array.isArray(data.data)) {\r\n//                     setProperties(data.data);\r\n//                 } else {\r\n//                     setProperties([]);\r\n//                 }\r\n//             })\r\n//             .catch(err => {\r\n//                 console.error(\"Error fetching lease properties:\", err);\r\n//                 setError(err.message);\r\n//             })\r\n//             .finally(() => {\r\n//                 setIsLoading(false);\r\n//             });\r\n//     }, []);\r\n\r\n//     // Function to toggle the expanded details of a row\r\n//     const toggleDetails = (propertyKey) => {\r\n//         setExpandedRowId(expandedRowId === propertyKey ? null : propertyKey);\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"lease-properties-page\">\r\n//             <Sidebar />\r\n//             <div className=\"lease-properties-content\">\r\n//                 <h2 className=\"lease-properties-title\">Lease Property Inquiries</h2>\r\n                \r\n//                 {isLoading ? (\r\n//                     <div className=\"text-center text-lg text-gray-500\">Loading...</div>\r\n//                 ) : error ? (\r\n//                     <div className=\"text-center text-lg text-red-500\">Error: {error}</div>\r\n//                 ) : (\r\n//                     <div className=\"lease-properties-table-wrapper\">\r\n//                         <table className=\"lease-properties-table\">\r\n//                             <thead>\r\n//                                 <tr>\r\n//                                     <th>#</th>\r\n//                                     <th>Owner Name</th>\r\n//                                     <th>Contact</th>\r\n//                                     <th>Expected Rent</th>\r\n//                                     <th>Property Type</th>\r\n//                                     <th>View Details</th>\r\n//                                 </tr>\r\n//                             </thead>\r\n//                             <tbody>\r\n//                                 {properties.length > 0 ? (\r\n//                                     properties.map((prop, idx) => (\r\n//                                         <React.Fragment key={prop.property_key}>\r\n//                                             <tr className=\"hover:bg-gray-100 transition-colors duration-200\">\r\n//                                                 <td>{idx + 1}</td>\r\n//                                                 <td>{prop.owner_name}</td>\r\n//                                                 <td>{prop.contact}</td>\r\n//                                                 <td>â‚¹{prop.expected_rent}</td>\r\n//                                                 <td>{prop.property_type}</td>\r\n//                                                 <td>\r\n//                                                     <button \r\n//                                                         onClick={() => toggleDetails(prop.property_key)}\r\n//                                                         className=\"details-toggle-button\"\r\n//                                                     >\r\n//                                                         {expandedRowId === prop.property_key ? 'Hide Details' : 'View Details'}\r\n//                                                     </button>\r\n//                                                 </td>\r\n//                                             </tr>\r\n//                                             {expandedRowId === prop.property_key && (\r\n//                                                 <tr className=\"detailed-row\">\r\n//                                                     <td colSpan=\"6\" className=\"p-4\">\r\n//                                                         <div className=\"detailed-content\">\r\n//                                                             <p><strong>Email:</strong> {prop.email}</p>\r\n//                                                             <p><strong>Address:</strong> {prop.address}</p>\r\n//                                                             <p><strong>SQFT:</strong> {prop.sqft}</p>\r\n//                                                             <p><strong>Floor Type:</strong> {prop.floor_type}</p>\r\n//                                                             <p><strong>State:</strong> {prop.state_name}</p>\r\n//                                                             <p><strong>City:</strong> {prop.city_name}</p>\r\n//                                                             <p><strong>Message:</strong> {prop.message}</p>\r\n//                                                             <p><strong>Created At:</strong> {prop.created_at}</p>\r\n//                                                         </div>\r\n//                                                     </td>\r\n//                                                 </tr>\r\n//                                             )}\r\n//                                         </React.Fragment>\r\n//                                     ))\r\n//                                 ) : (\r\n//                                     <tr>\r\n//                                         <td colSpan=\"6\" className=\"text-center py-4 text-gray-500\">No lease properties found.</td>\r\n//                                     </tr>\r\n//                                 )}\r\n//                             </tbody>\r\n//                         </table>\r\n//                     </div>\r\n//                 )}\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default LeaseProperties;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { FaPlusCircle, FaUserTie } from 'react-icons/fa'; // Added FaUserTie\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport Sidebar from './Sidebar';\r\nimport AssignModal from './AssignModal';\r\nimport './InvestorPage.css';\r\nimport './DashboardLayout.css';\r\n// import './InvestorTable.css'; // Ensure correct CSS file\r\n\r\nimport { getApiUrl } from '../utils/api';\r\n\r\nexport default function InvestorTable() {\r\n    const [investors, setInvestors] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [showAssignModal, setShowAssignModal] = useState(false);\r\n    const [selectedInvestor, setSelectedInvestor] = useState(null);\r\n\r\n    const fetchInvestors = useCallback(async () => {\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch(getApiUrl('get-generic-inquiries.php'));\r\n            const result = await response.json();\r\n            if (result.success) {\r\n                setInvestors(result.data);\r\n                setError(null);\r\n            } else {\r\n                toast.error(result.message || 'Failed to fetch inquiries.');\r\n                setError(result.message);\r\n            }\r\n        } catch (e) {\r\n            toast.error('Network error. Please check your server connection.');\r\n            setError(e.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchInvestors();\r\n    }, [fetchInvestors]);\r\n\r\n    const openAssignModal = (investor) => {\r\n        setSelectedInvestor(investor);\r\n        setShowAssignModal(true);\r\n    };\r\n\r\n    const closeAssignModal = () => {\r\n        setSelectedInvestor(null);\r\n        setShowAssignModal(false);\r\n    };\r\n\r\n    const handleAssignmentSuccess = () => {\r\n        toast.success(\"Investor Assigned Successfully!\");\r\n        fetchInvestors();\r\n        closeAssignModal();\r\n    };\r\n\r\n    return (\r\n        <div className=\"dashboard-container\">\r\n            <Sidebar />\r\n            <div className=\"main-content\">\r\n                <ToastContainer position=\"top-right\" autoClose={3000} />\r\n                <div className=\"investor-table-container\">\r\n                    <div className=\"table-header\">\r\n                        <h2 className=\"table-title\">All Inquiries</h2>\r\n                    </div>\r\n                    {loading ? (\r\n                        <div className=\"loading\">Loading inquiries...</div>\r\n                    ) : error ? (\r\n                        <div className=\"error\">Error: {error}</div>\r\n                    ) : investors.length === 0 ? (\r\n                        <div className=\"no-data\">No Inquiries found.</div>\r\n                    ) : (\r\n                        <div className=\"table-wrapper\">\r\n                            <table>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Person Name</th>\r\n                                        <th>Phone</th>\r\n                                        <th>Email</th>\r\n                                        <th>State</th>\r\n                                        <th>City</th>\r\n                                        <th>Message</th>\r\n                                        <th>Assign</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {investors.map((inv) => (\r\n                                        <tr key={inv.id}>\r\n                                            <td data-label=\"Person Name\">{inv.name}</td>\r\n                                            <td data-label=\"Phone\">{inv.phone}</td>\r\n                                            <td data-label=\"Email\">{inv.email}</td>\r\n                                            <td data-label=\"State\">{inv.state_name}</td>\r\n                                            <td data-label=\"City\">{inv.city_name}</td>\r\n                                            <td data-label=\"Message\">{inv.message}</td>\r\n                                            <td data-label=\"Assign\">\r\n                                                <button\r\n                                                    className=\"assign-btn\"\r\n                                                    onClick={() => openAssignModal(inv)}\r\n                                                >\r\n                                                    <FaUserTie className=\"assign-icon\" />\r\n                                                    <span className=\"assign-text\">Assign</span>\r\n                                                </button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                {showAssignModal && (\r\n                    <AssignModal\r\n                        investor={selectedInvestor}\r\n                        onClose={closeAssignModal}\r\n                        onAssign={handleAssignmentSuccess}\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { getApiUrl } from '../utils/api'; // Ensure this path is correct\r\nimport './AssignModal.css'; // Ensure this path is correct\r\n\r\nexport default function AssignModal({ investor, onClose, onAssign }) {\r\n  const [brands, setBrands] = useState([]);\r\n  const [selectedBrand, setSelectedBrand] = useState('');\r\n  const [loadingBrands, setLoadingBrands] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchBrands = async () => {\r\n      try {\r\n        // Fetching brands for the dropdown\r\n        const response = await fetch(getApiUrl('get-brands-name.php')); \r\n        const result = await response.json();\r\n        if (result.success) {\r\n          setBrands(result.data);\r\n        } else {\r\n          toast.error(result.message || 'Failed to fetch brands for dropdown.');\r\n        }\r\n      } catch (e) {\r\n        toast.error('Network error fetching brands for dropdown.');\r\n        console.error('Error fetching brands:', e);\r\n      } finally {\r\n        setLoadingBrands(false);\r\n      }\r\n    };\r\n    fetchBrands();\r\n  }, []);\r\n\r\n  const handleAssignClick = async () => {\r\n    if (!selectedBrand) {\r\n      toast.error('Please select a brand to assign.');\r\n      return;\r\n    }\r\n\r\n    // Construct the data payload for the API\r\n    const dataToAssign = {\r\n      name: investor.name,\r\n      phone: investor.phone,\r\n      email: investor.email,\r\n      state: investor.state_name, // PHP expects 'state' and 'city' strings\r\n      state_id: investor.state_id,\r\n      city: investor.city_name,\r\n      city_id: investor.city_id,\r\n      message: investor.message,\r\n      brand_id: selectedBrand,\r\n    };\r\n\r\n    // --- DEBUGGING START ---\r\n    console.log('Data being sent to PHP:', dataToAssign);\r\n    console.log('JSON stringified data:', JSON.stringify(dataToAssign));\r\n    // --- DEBUGGING END ---\r\n    \r\n    try {\r\n      const response = await fetch(getApiUrl('assign-investor.php'), {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json', // Crucial header\r\n        },\r\n        body: JSON.stringify(dataToAssign),\r\n      });\r\n\r\n      // --- DEBUGGING START ---\r\n      console.log('Raw response status:', response.status);\r\n      const responseText = await response.text(); // Get raw text first\r\n      console.log('Raw response text:', responseText);\r\n      // --- DEBUGGING END ---\r\n\r\n      const result = JSON.parse(responseText); // Manually parse after logging raw text\r\n\r\n      if (result.success) {\r\n        toast.success(result.message);\r\n        onAssign(); // Callback to parent to refresh data and close modal\r\n      } else {\r\n        toast.error(result.message || 'Failed to assign investor.');\r\n      }\r\n    } catch (e) {\r\n      toast.error('API error during assignment: ' + e.message);\r\n      console.error('Error during API call:', e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"modal-overlay\">\r\n      <div className=\"assign-modal\">\r\n        <div className=\"modal-header\">\r\n          <h3>Assign {investor.name} to Brand</h3>\r\n          <button className=\"close-btn\" onClick={onClose}>&times;</button>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n          <p>\r\n            **Assigning** **`{investor.name}`** **to a brand.**\r\n          </p>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"brand-select\">Select Brand:</label>\r\n            {loadingBrands ? (\r\n              <p>Loading brands...</p>\r\n            ) : (\r\n              <select\r\n                id=\"brand-select\"\r\n                value={selectedBrand}\r\n                onChange={(e) => setSelectedBrand(e.target.value)}\r\n              >\r\n                <option value=\"\">-- Choose a Brand --</option>\r\n                {brands.map(brand => (\r\n                  <option key={brand.id} value={brand.id}>\r\n                    {brand.name}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"modal-footer\">\r\n          <button className=\"btn-assign\" onClick={handleAssignClick} disabled={!selectedBrand}>\r\n            Assign\r\n          </button>\r\n          <button className=\"btn-cancel\" onClick={onClose}>\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["InvestorTable","investors","setInvestors","useState","loading","setLoading","error","setError","showAssignModal","setShowAssignModal","selectedInvestor","setSelectedInvestor","fetchInvestors","useCallback","async","response","fetch","getApiUrl","result","json","success","data","toast","message","e","useEffect","closeAssignModal","_jsxs","className","children","_jsx","Sidebar","ToastContainer","position","autoClose","length","map","inv","name","phone","email","state_name","city_name","onClick","FaUserTie","id","AssignModal","investor","onClose","onAssign","handleAssignmentSuccess","_ref","brands","setBrands","selectedBrand","setSelectedBrand","loadingBrands","setLoadingBrands","console","fetchBrands","htmlFor","value","onChange","target","brand","dataToAssign","state","state_id","city","city_id","brand_id","log","JSON","stringify","method","headers","body","status","responseText","text","parse","disabled"],"sourceRoot":""}