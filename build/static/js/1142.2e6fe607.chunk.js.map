{"version":3,"file":"static/js/1142.2e6fe607.chunk.js","mappings":"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","sources":["admin/DisplayinhouseInvestor.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import \"./BrandInquiries.css\";\r\n// import Sidebar from \"./Sidebar\";\r\n// import { getApiUrl } from \"../utils/api\";\r\n\r\n// export default function InvestorInquiryTable() {\r\n//   const [investors, setInvestors] = useState([]);\r\n//   const [expandedId, setExpandedId] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [editedData, setEditedData] = useState({});\r\n//   const [saving, setSaving] = useState(false);\r\n\r\n//   // Assign feature\r\n//   const [assigningId, setAssigningId] = useState(null);\r\n//   const [users, setUsers] = useState([]);\r\n//   const [selectedUser, setSelectedUser] = useState(\"\");\r\n//   const [assigning, setAssigning] = useState(false);\r\n\r\n//   // Upload Excel\r\n//   const [uploading, setUploading] = useState(false);\r\n\r\n//   const stageOptions = [\r\n//     \"Contacted\",\r\n//     \"Qualified\",\r\n//     \"Disqualified\",\r\n//     \"Working\",\r\n//     \"Prospecting\",\r\n//     \"Negotiation\",\r\n//     \"Closed Won\",\r\n//     \"Closed Lost\",\r\n//   ];\r\n\r\n//   const toggleExpand = (id) => {\r\n//     setExpandedId(expandedId === id ? null : id);\r\n//     setAssigningId(null);\r\n//   };\r\n\r\n//   const handleInputChange = (id, field, value) => {\r\n//     setEditedData((prev) => ({\r\n//       ...prev,\r\n//       [id]: { ...prev[id], [field]: value },\r\n//     }));\r\n//   };\r\n\r\n//   const handleSave = async (id) => {\r\n//     try {\r\n//       setSaving(true);\r\n//       const payload = { id, ...editedData[id] };\r\n//       const res = await fetch(getApiUrl(\"update-inhouse-investor.php\"), {\r\n//         method: \"POST\",\r\n//         headers: { \"Content-Type\": \"application/json\" },\r\n//         body: JSON.stringify(payload),\r\n//       });\r\n//       const result = await res.json();\r\n\r\n//       if (res.ok && result.success) {\r\n//         alert(result.message || \"Saved successfully\");\r\n//         setInvestors(\r\n//           investors.map((inv) =>\r\n//             inv.id === id ? { ...inv, ...editedData[id] } : inv\r\n//           )\r\n//         );\r\n//         setEditedData((prev) => {\r\n//           const copy = { ...prev };\r\n//           delete copy[id];\r\n//           return copy;\r\n//         });\r\n//       } else {\r\n//         alert(result.message || \"Failed to save data\");\r\n//       }\r\n//     } catch (err) {\r\n//       console.error(\"Save error:\", err);\r\n//       alert(\"Something went wrong while saving.\");\r\n//     } finally {\r\n//       setSaving(false);\r\n//     }\r\n//   };\r\n\r\n//   const renderEditableField = (id, key, value) => {\r\n//     const currentValue = editedData[id]?.[key] ?? value ?? \"\";\r\n\r\n//     if (key === \"stage\") {\r\n//       return (\r\n//         <select\r\n//           value={currentValue}\r\n//           onChange={(e) => handleInputChange(id, key, e.target.value)}\r\n//         >\r\n//           <option value=\"\">Select Stage</option>\r\n//           {stageOptions.map((stage) => (\r\n//             <option key={stage} value={stage}>\r\n//               {stage}\r\n//             </option>\r\n//           ))}\r\n//         </select>\r\n//       );\r\n//     }\r\n\r\n//     if (key.toLowerCase().includes(\"date\")) {\r\n//       return (\r\n//         <input\r\n//           type=\"date\"\r\n//           value={currentValue}\r\n//           onChange={(e) => handleInputChange(id, key, e.target.value)}\r\n//         />\r\n//       );\r\n//     }\r\n\r\n//     if (key.toLowerCase().includes(\"time\")) {\r\n//       return (\r\n//         <input\r\n//           type=\"time\"\r\n//           value={currentValue}\r\n//           onChange={(e) => handleInputChange(id, key, e.target.value)}\r\n//         />\r\n//       );\r\n//     }\r\n\r\n//     return (\r\n//       <input\r\n//         type=\"text\"\r\n//         value={currentValue}\r\n//         onChange={(e) => handleInputChange(id, key, e.target.value)}\r\n//       />\r\n//     );\r\n//   };\r\n\r\n//   const fetchUsers = async () => {\r\n//     try {\r\n//       const res = await fetch(getApiUrl(\"get-user-name.php\"));\r\n//       const json = await res.json();\r\n//       setUsers(json.data || []);\r\n//     } catch (err) {\r\n//       console.error(\"Failed to fetch users\", err);\r\n//       setUsers([]);\r\n//     }\r\n//   };\r\n\r\n//   const handleAssignClick = (id) => {\r\n//     setAssigningId(id);\r\n//     setSelectedUser(\"\");\r\n//     fetchUsers();\r\n//   };\r\n\r\n//   const handleConfirmAssign = async () => {\r\n//     if (!selectedUser) {\r\n//       alert(\"Please select a user first\");\r\n//       return;\r\n//     }\r\n//     try {\r\n//       setAssigning(true);\r\n//       const payload = { investor_id: assigningId, user_id: selectedUser };\r\n//       const res = await fetch(getApiUrl(\"assign-inhouse-investor.php\"), {\r\n//         method: \"POST\",\r\n//         headers: { \"Content-Type\": \"application/json\" },\r\n//         body: JSON.stringify(payload),\r\n//       });\r\n//       const result = await res.json();\r\n//       if (res.ok && result.success) {\r\n//         alert(result.message || \"Assigned successfully\");\r\n//         setInvestors(\r\n//           investors.map((inv) =>\r\n//             inv.id === assigningId\r\n//               ? { ...inv, assignedUserId: selectedUser }\r\n//               : inv\r\n//           )\r\n//         );\r\n//         setAssigningId(null);\r\n//         setSelectedUser(\"\");\r\n//       } else {\r\n//         alert(result.message || \"Failed to assign\");\r\n//       }\r\n//     } catch (err) {\r\n//       console.error(\"Assign error:\", err);\r\n//       alert(\"Something went wrong while assigning.\");\r\n//     } finally {\r\n//       setAssigning(false);\r\n//     }\r\n//   };\r\n\r\n//   const fetchInvestors = async () => {\r\n//     try {\r\n//       const userId = localStorage.getItem(\"adminId\") || 0;\r\n//       const res = await fetch(\r\n//         getApiUrl(`get-inhouse-investors.php?user_id=${userId}`)\r\n//       );\r\n//       const data = await res.json();\r\n//       setInvestors(data);\r\n//       setLoading(false);\r\n//     } catch (err) {\r\n//       setError(\"Failed to fetch investors.\");\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleExcelUpload = async (e) => {\r\n//     const file = e.target.files[0];\r\n//     if (!file) return;\r\n//     const formData = new FormData();\r\n//     formData.append(\"file\", file);\r\n\r\n//     try {\r\n//       setUploading(true);\r\n//       const res = await fetch(getApiUrl(\"upload-investors-excel.php\"), {\r\n//         method: \"POST\",\r\n//         body: formData,\r\n//       });\r\n//       const result = await res.json();\r\n\r\n//       if (res.ok && result.success) {\r\n//         alert(\"Excel uploaded successfully!\");\r\n//         fetchInvestors();\r\n//       } else {\r\n//         alert(result.message || \"Upload failed\");\r\n//       }\r\n//     } catch (err) {\r\n//       console.error(\"Excel upload error:\", err);\r\n//       alert(\"Something went wrong while uploading Excel.\");\r\n//     } finally {\r\n//       setUploading(false);\r\n//       e.target.value = \"\";\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchInvestors();\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"dashboard-container\">\r\n//       <Sidebar />\r\n//       <div className=\"main-content\">\r\n//         <h2 className=\"table-title\">Investor Inquiries</h2>\r\n\r\n//         <div style={{ marginBottom: \"15px\" }}>\r\n//           <label className=\"upload-label\">\r\n//             Upload Excel:\r\n//             <input\r\n//               type=\"file\"\r\n//               accept=\".xlsx,.xls\"\r\n//               onChange={handleExcelUpload}\r\n//               disabled={uploading}\r\n//               style={{ marginLeft: \"10px\" }}\r\n//             />\r\n//           </label>\r\n//           {uploading && <span style={{ marginLeft: \"10px\" }}>Uploading...</span>}\r\n//         </div>\r\n\r\n//         {loading && <div className=\"loading\">Loading...</div>}\r\n//         {error && <div className=\"error\">{error}</div>}\r\n\r\n//         {!loading && !error && (\r\n//           <div className=\"table-wrapper\">\r\n//             <table className=\"inquiry-table\">\r\n//               <thead>\r\n//                 <tr>\r\n//                   <th>ID</th>\r\n//                   <th>Name</th>\r\n//                   <th>Contact</th>\r\n//                   <th>Email</th>\r\n//                   <th>Investment Budget</th>\r\n//                   <th>Stage</th>\r\n//                   <th>Actions</th>\r\n//                 </tr>\r\n//               </thead>\r\n//               <tbody>\r\n//                 {investors.map((inv) => (\r\n//                   <React.Fragment key={inv.id}>\r\n//                     <tr className=\"summary-row\">\r\n//                       <td>{inv.id}</td>\r\n//                       <td>{inv.name}</td>\r\n//                       <td>{inv.contact}</td>\r\n//                       <td>{inv.email}</td>\r\n//                       <td>{inv.investment_budget || \"N/A\"}</td>\r\n//                       <td>{inv.stage || \"N/A\"}</td>\r\n//                       <td>\r\n//                         <button\r\n//                           onClick={() => toggleExpand(inv.id)}\r\n//                           className=\"expand-btn\"\r\n//                         >\r\n//                           {expandedId === inv.id ? \"Hide Details\" : \"View Details\"}\r\n//                         </button>\r\n//                         {localStorage.getItem(\"adminId\") === \"1\" && (\r\n//                           <button\r\n//                             onClick={() => handleAssignClick(inv.id)}\r\n//                             className=\"assign-btn\"\r\n//                             style={{ marginLeft: \"5px\" }}\r\n//                           >\r\n//                             Assign\r\n//                           </button>\r\n//                         )}\r\n//                       </td>\r\n//                     </tr>\r\n\r\n//                     {expandedId === inv.id && (\r\n//                       <tr className=\"details-row\">\r\n//                         <td colSpan=\"7\">\r\n//                           <div className=\"details-box\">\r\n//                             {assigningId === inv.id && users.length > 0 && (\r\n//                               <div className=\"assign-box\">\r\n//                                 <label>\r\n//                                   Assign to:{\" \"}\r\n//                                   <select\r\n//                                     value={selectedUser}\r\n//                                     onChange={(e) =>\r\n//                                       setSelectedUser(e.target.value)\r\n//                                     }\r\n//                                   >\r\n//                                     <option value=\"\">Select User</option>\r\n//                                     {users.map((user) => (\r\n//                                       <option key={user.id} value={user.id}>\r\n//                                         {user.name}\r\n//                                       </option>\r\n//                                     ))}\r\n//                                   </select>\r\n//                                 </label>\r\n//                                 <button\r\n//                                   onClick={handleConfirmAssign}\r\n//                                   className=\"confirm-btn\"\r\n//                                   disabled={assigning}\r\n//                                   style={{ marginLeft: \"10px\" }}\r\n//                                 >\r\n//                                   {assigning ? \"Assigning...\" : \"Confirm\"}\r\n//                                 </button>\r\n//                               </div>\r\n//                             )}\r\n\r\n//                             {/* Always editable fields */}\r\n//                             <>\r\n//                               {Object.keys(inv).map((key) => {\r\n//                                 if (key === \"id\") return null;\r\n//                                 const value = inv[key];\r\n//                                 return (\r\n//                                   <p key={key}>\r\n//                                     <strong>{key}:</strong>{\" \"}\r\n//                                     {renderEditableField(inv.id, key, value)}\r\n//                                   </p>\r\n//                                 );\r\n//                               })}\r\n//                               <button\r\n//                                 onClick={() => handleSave(inv.id)}\r\n//                                 className=\"save-btn\"\r\n//                                 disabled={saving}\r\n//                               >\r\n//                                 {saving ? \"Saving...\" : \"Save\"}\r\n//                               </button>\r\n//                             </>\r\n//                           </div>\r\n//                         </td>\r\n//                       </tr>\r\n//                     )}\r\n//                   </React.Fragment>\r\n//                 ))}\r\n//               </tbody>\r\n//             </table>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./BrandInquiries.css\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport { getApiUrl } from \"../utils/api\";\r\n\r\nexport default function InvestorInquiryTable() {\r\n  const [investors, setInvestors] = useState([]);\r\n  const [expandedId, setExpandedId] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [editedData, setEditedData] = useState({});\r\n  const [saving, setSaving] = useState(false);\r\n\r\n  // Assign feature\r\n  const [assigningId, setAssigningId] = useState(null);\r\n  const [users, setUsers] = useState([]);\r\n  const [selectedUser, setSelectedUser] = useState(\"\");\r\n  const [assigning, setAssigning] = useState(false);\r\n\r\n  // Upload Excel\r\n  const [uploading, setUploading] = useState(false);\r\n\r\n  // 🔹 Pagination\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n  const stageOptions = [\r\n    \"Contacted\",\r\n    \"Qualified\",\r\n    \"Disqualified\",\r\n    \"Working\",\r\n    \"Prospecting\",\r\n    \"Negotiation\",\r\n    \"Closed Won\",\r\n    \"Closed Lost\",\r\n  ];\r\n\r\n  /** Toggle expand row */\r\n  const toggleExpand = (id) => {\r\n    setExpandedId(expandedId === id ? null : id);\r\n    setAssigningId(null);\r\n  };\r\n\r\n  /** Track input changes */\r\n  const handleInputChange = (id, field, value) => {\r\n    setEditedData((prev) => ({\r\n      ...prev,\r\n      [id]: { ...prev[id], [field]: value },\r\n    }));\r\n  };\r\n\r\n  /** Save updates */\r\n  const handleSave = async (id) => {\r\n    try {\r\n      setSaving(true);\r\n      const payload = { id, ...editedData[id] };\r\n\r\n      const res = await fetch(getApiUrl(\"update-inhouse-investor.php\"), {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      const result = await res.json();\r\n      if (res.ok && result.success) {\r\n        alert(result.message || \"Saved successfully\");\r\n        setInvestors((prev) =>\r\n          prev.map((inv) => (inv.id === id ? { ...inv, ...editedData[id] } : inv))\r\n        );\r\n        setEditedData((prev) => {\r\n          const copy = { ...prev };\r\n          delete copy[id];\r\n          return copy;\r\n        });\r\n      } else {\r\n        alert(result.message || \"Failed to save data\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Save error:\", err);\r\n      alert(\"Something went wrong while saving.\");\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  /** Editable field renderer */\r\n  const renderEditableField = (id, key, value) => {\r\n    const currentValue = editedData[id]?.[key] ?? value ?? \"\";\r\n\r\n    if (key === \"stage\") {\r\n      return (\r\n        <select\r\n          value={currentValue}\r\n          onChange={(e) => handleInputChange(id, key, e.target.value)}\r\n        >\r\n          <option value=\"\">Select Stage</option>\r\n          {stageOptions.map((stage) => (\r\n            <option key={stage} value={stage}>\r\n              {stage}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n    }\r\n\r\n    if (key.toLowerCase().includes(\"date\")) {\r\n      return (\r\n        <input\r\n          type=\"date\"\r\n          value={currentValue}\r\n          onChange={(e) => handleInputChange(id, key, e.target.value)}\r\n        />\r\n      );\r\n    }\r\n\r\n    if (key.toLowerCase().includes(\"time\")) {\r\n      return (\r\n        <input\r\n          type=\"time\"\r\n          value={currentValue}\r\n          onChange={(e) => handleInputChange(id, key, e.target.value)}\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <input\r\n        type=\"text\"\r\n        value={currentValue}\r\n        onChange={(e) => handleInputChange(id, key, e.target.value)}\r\n      />\r\n    );\r\n  };\r\n\r\n  /** Fetch users for assigning */\r\n  const fetchUsers = async () => {\r\n    try {\r\n      const res = await fetch(getApiUrl(\"get-user-name.php\"));\r\n      const json = await res.json();\r\n      setUsers(json?.data || []);\r\n    } catch (err) {\r\n      console.error(\"Failed to fetch users\", err);\r\n      setUsers([]);\r\n    }\r\n  };\r\n\r\n  /** Assign click handler */\r\n  const handleAssignClick = (id) => {\r\n    setAssigningId(id);\r\n    setSelectedUser(\"\");\r\n    fetchUsers();\r\n  };\r\n\r\n  /** Confirm assign */\r\n  const handleConfirmAssign = async () => {\r\n    if (!selectedUser) {\r\n      alert(\"Please select a user first\");\r\n      return;\r\n    }\r\n    try {\r\n      setAssigning(true);\r\n      const payload = { investor_id: assigningId, user_id: selectedUser };\r\n\r\n      const res = await fetch(getApiUrl(\"assign-inhouse-investor.php\"), {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      const result = await res.json();\r\n      if (res.ok && result.success) {\r\n        alert(result.message || \"Assigned successfully\");\r\n        setInvestors((prev) =>\r\n          prev.map((inv) =>\r\n            inv.id === assigningId ? { ...inv, assignedUserId: selectedUser } : inv\r\n          )\r\n        );\r\n        setAssigningId(null);\r\n        setSelectedUser(\"\");\r\n      } else {\r\n        alert(result.message || \"Failed to assign\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Assign error:\", err);\r\n      alert(\"Something went wrong while assigning.\");\r\n    } finally {\r\n      setAssigning(false);\r\n    }\r\n  };\r\n\r\n  /** Fetch investors */\r\n  const fetchInvestors = async () => {\r\n    try {\r\n      const userId = localStorage.getItem(\"adminId\") || 0;\r\n      const res = await fetch(\r\n        getApiUrl(`get-inhouse-investors.php?user_id=${userId}`)\r\n      );\r\n      const data = await res.json();\r\n      setInvestors(Array.isArray(data) ? data : []);\r\n      setLoading(false);\r\n    } catch (err) {\r\n      console.error(\"Investor fetch error:\", err);\r\n      setError(\"Failed to fetch investors.\");\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  /** Upload Excel */\r\n  const handleExcelUpload = async (e) => {\r\n    const file = e.target.files[0];\r\n    if (!file) return;\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n\r\n    try {\r\n      setUploading(true);\r\n      const res = await fetch(getApiUrl(\"upload-investors-excel.php\"), {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      const result = await res.json();\r\n      if (res.ok && result.success) {\r\n        alert(\"Excel uploaded successfully!\");\r\n        fetchInvestors();\r\n      } else {\r\n        alert(result.message || \"Upload failed\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Excel upload error:\", err);\r\n      alert(\"Something went wrong while uploading Excel.\");\r\n    } finally {\r\n      setUploading(false);\r\n      e.target.value = \"\";\r\n    }\r\n  };\r\n\r\n  /** Initial load */\r\n  useEffect(() => {\r\n    fetchInvestors();\r\n  }, []);\r\n\r\n  // 🔹 Pagination slice\r\n  const totalPages = Math.ceil(investors.length / rowsPerPage);\r\n  const indexOfLast = currentPage * rowsPerPage;\r\n  const indexOfFirst = indexOfLast - rowsPerPage;\r\n  const currentInvestors = investors.slice(indexOfFirst, indexOfLast);\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <Sidebar />\r\n      <div className=\"main-content\">\r\n        <h2 className=\"table-title\">Investor Inquiries</h2>\r\n\r\n        {/* Excel Upload */}\r\n        {localStorage.getItem(\"adminId\")==\"1\" && (\r\n          <div className=\"upload-box\">\r\n            <label className=\"upload-label\">\r\n              Upload Excel:\r\n              <input\r\n                type=\"file\"\r\n                accept=\".xlsx,.xls\"\r\n                onChange={handleExcelUpload}\r\n                disabled={uploading}\r\n              />\r\n            </label>\r\n            {uploading && <span className=\"uploading-text\">Uploading...</span>}\r\n          </div>\r\n        )}\r\n\r\n        {/* Loading / Error */}\r\n        {loading && <div className=\"loading\">Loading...</div>}\r\n        {error && <div className=\"error\">{error}</div>}\r\n\r\n        {/* Table */}\r\n        {!loading && !error && (\r\n          <>\r\n            <div className=\"table-wrapper\">\r\n              <table className=\"inquiry-table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>ID</th>\r\n                    <th>Name</th>\r\n                    <th>Contact</th>\r\n                    <th>Email</th>\r\n                    <th>Investment Budget</th>\r\n                    <th>Stage</th>\r\n                    <th>Actions</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {currentInvestors.map((inv) => (\r\n                    <React.Fragment key={inv.id}>\r\n                      {/* Summary Row */}\r\n                      <tr className=\"summary-row\">\r\n                        <td>{inv.id}</td>\r\n                        <td>{inv.name}</td>\r\n                        <td>{inv.contact}</td>\r\n                        <td>{inv.email}</td>\r\n                        <td>{inv.investment_budget || \"N/A\"}</td>\r\n                        <td>{inv.stage || \"N/A\"}</td>\r\n                        <td>\r\n                          <button\r\n                            onClick={() => toggleExpand(inv.id)}\r\n                            className=\"expand-btn\"\r\n                          >\r\n                            {expandedId === inv.id ? \"Hide Details\" : \"View Details\"}\r\n                          </button>\r\n                          {localStorage.getItem(\"adminId\") === \"1\" && (\r\n                            <button\r\n                              onClick={() => handleAssignClick(inv.id)}\r\n                              className=\"assign-btn\"\r\n                            >\r\n                              Assign\r\n                            </button>\r\n                          )}\r\n                        </td>\r\n                      </tr>\r\n\r\n                      {/* Expanded Details Row */}\r\n                      {expandedId === inv.id && (\r\n                        <tr className=\"details-row\">\r\n                          <td colSpan=\"7\">\r\n                            <div className=\"details-box\">\r\n                              {/* Assign User */}\r\n                              {assigningId === inv.id && users.length > 0 && (\r\n                                <div className=\"assign-box\">\r\n                                  <label>\r\n                                    Assign to:\r\n                                    <select\r\n                                      value={selectedUser}\r\n                                      onChange={(e) => setSelectedUser(e.target.value)}\r\n                                    >\r\n                                      <option value=\"\">Select User</option>\r\n                                      {users.map((user) => (\r\n                                        <option key={user.id} value={user.id}>\r\n                                          {user.name}\r\n                                        </option>\r\n                                      ))}\r\n                                    </select>\r\n                                  </label>\r\n                                  <button\r\n                                    onClick={handleConfirmAssign}\r\n                                    className=\"confirm-btn\"\r\n                                    disabled={assigning}\r\n                                  >\r\n                                    {assigning ? \"Assigning...\" : \"Confirm\"}\r\n                                  </button>\r\n                                </div>\r\n                              )}\r\n\r\n                              {/* Editable Fields */}\r\n                              {Object.keys(inv).map((key) => {\r\n                                if (key === \"id\") return null;\r\n                                return (\r\n                                  <p key={key}>\r\n                                    <strong>{key}:</strong>{\" \"}\r\n                                    {renderEditableField(inv.id, key, inv[key])}\r\n                                  </p>\r\n                                );\r\n                              })}\r\n\r\n                              <button\r\n                                onClick={() => handleSave(inv.id)}\r\n                                className=\"save-btn\"\r\n                                disabled={saving}\r\n                              >\r\n                                {saving ? \"Saving...\" : \"Save\"}\r\n                              </button>\r\n                            </div>\r\n                          </td>\r\n                        </tr>\r\n                      )}\r\n                    </React.Fragment>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            {/* 🔹 Pagination Controls */}\r\n            {totalPages > 1 && (\r\n              <div className=\"pagination-wrapper\">\r\n                {/* Rows per page */}\r\n                <div className=\"rows-per-page\">\r\n                  <label htmlFor=\"rows\">Rows per page:</label>\r\n                  <select\r\n                    id=\"rows\"\r\n                    value={rowsPerPage}\r\n                    onChange={(e) => {\r\n                      setRowsPerPage(Number(e.target.value));\r\n                      setCurrentPage(1);\r\n                    }}\r\n                  >\r\n                    <option value={5}>5</option>\r\n                    <option value={10}>10</option>\r\n                    <option value={20}>20</option>\r\n                    <option value={50}>50</option>\r\n                  </select>\r\n                </div>\r\n\r\n                {/* Pagination */}\r\n                <div className=\"pagination\">\r\n                  <button\r\n                    onClick={() => setCurrentPage((p) => Math.max(p - 1, 1))}\r\n                    disabled={currentPage === 1}\r\n                  >\r\n                    Prev\r\n                  </button>\r\n\r\n                  {(() => {\r\n                    const pageNumbers = [];\r\n                    if (totalPages <= 10) {\r\n                      for (let i = 1; i <= totalPages; i++) {\r\n                        pageNumbers.push(i);\r\n                      }\r\n                    } else {\r\n                      let startPage = Math.max(2, currentPage - 2);\r\n                      let endPage = Math.min(totalPages - 3, currentPage + 2);\r\n\r\n                      pageNumbers.push(1);\r\n                      if (startPage > 2) pageNumbers.push(\"...\");\r\n\r\n                      for (let i = startPage; i <= endPage; i++) {\r\n                        pageNumbers.push(i);\r\n                      }\r\n\r\n                      if (endPage < totalPages - 3) pageNumbers.push(\"...\");\r\n                      for (let i = totalPages - 2; i <= totalPages; i++) {\r\n                        pageNumbers.push(i);\r\n                      }\r\n                    }\r\n\r\n                    return pageNumbers.map((num, idx) =>\r\n                      num === \"...\" ? (\r\n                        <span key={idx} className=\"dots\">...</span>\r\n                      ) : (\r\n                        <button\r\n                          key={num}\r\n                          className={currentPage === num ? \"active\" : \"\"}\r\n                          onClick={() => setCurrentPage(num)}\r\n                        >\r\n                          {num}\r\n                        </button>\r\n                      )\r\n                    );\r\n                  })()}\r\n\r\n                  <button\r\n                    onClick={() => setCurrentPage((p) => Math.min(p + 1, totalPages))}\r\n                    disabled={currentPage === totalPages}\r\n                  >\r\n                    Next\r\n                  </button>\r\n                </div>\r\n\r\n                {/* Page info */}\r\n                <div className=\"page-info\">\r\n                  Page {currentPage} of {totalPages}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["InvestorInquiryTable","investors","setInvestors","useState","expandedId","setExpandedId","loading","setLoading","error","setError","editedData","setEditedData","saving","setSaving","assigningId","setAssigningId","users","setUsers","selectedUser","setSelectedUser","assigning","setAssigning","uploading","setUploading","currentPage","setCurrentPage","rowsPerPage","setRowsPerPage","stageOptions","handleInputChange","id","field","value","prev","_objectSpread","renderEditableField","key","_ref","_editedData$id$key","_editedData$id","currentValue","_jsxs","onChange","e","target","children","_jsx","map","stage","toLowerCase","includes","type","handleAssignClick","async","res","fetch","getApiUrl","json","data","err","console","fetchUsers","handleConfirmAssign","payload","investor_id","user_id","method","headers","body","JSON","stringify","result","ok","success","alert","message","inv","assignedUserId","fetchInvestors","userId","localStorage","getItem","concat","Array","isArray","useEffect","totalPages","Math","ceil","length","indexOfLast","indexOfFirst","currentInvestors","slice","className","Sidebar","accept","file","files","formData","FormData","append","disabled","_Fragment","React","name","contact","email","investment_budget","onClick","toggleExpand","colSpan","user","Object","keys","copy","handleSave","htmlFor","Number","p","max","pageNumbers","i","push","startPage","endPage","min","num","idx"],"sourceRoot":""}