{"version":3,"file":"static/js/4984.ce13b9d6.chunk.js","mappings":"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","sources":["admin/DisplayinhouseBrands.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./BrandInquiries.css\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport { getApiUrl } from \"../utils/api\";\r\n\r\nexport default function InquiryTable() {\r\n  const [inquiries, setInquiries] = useState([]);\r\n  const [expandedId, setExpandedId] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [editedData, setEditedData] = useState({});\r\n  const [saving, setSaving] = useState(false);\r\n\r\n  // Pagination\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const itemsPerPage = 10;\r\n\r\n  // Upload Excel\r\n  const [file, setFile] = useState(null);\r\n  const [uploading, setUploading] = useState(false);\r\n\r\n  // Assign feature\r\n  const [assigningId, setAssigningId] = useState(null);\r\n  const [userList, setUserList] = useState([]);\r\n  const [selectedUser, setSelectedUser] = useState(\"\");\r\n  const [assigning, setAssigning] = useState(false);\r\n\r\n  // Master/Category/Subcategory states\r\n  const [masterCategories, setMasterCategories] = useState([]);\r\n  const [categories, setCategories] = useState({});\r\n  const [subCategories, setSubCategories] = useState({});\r\n\r\n  const stageOptions = [\"Prospecting\", \"Negotiation\", \"Closed Won\", \"Closed Lost\"];\r\n  const statusOptions = [\"New\", \"Contacted\", \"Qualified\", \"Disqualified\", \"Working\"];\r\n  const productOptions = [\r\n    { id: 1, name: \"Sponsorship\" },\r\n    { id: 2, name: \"Co Sponsorship\" },\r\n    { id: 3, name: \"Title Sponsor\" },\r\n    { id: 4, name: \"Premium Stall\" },\r\n    { id: 5, name: \"General Stall\" },\r\n    { id: 6, name: \"Onboarding\" },\r\n    { id: 7, name: \"FDP\" },\r\n    { id: 8, name: \"MNR\" },\r\n    { id: 9, name: \"Recruitment\" },\r\n  ];\r\n\r\n  const toggleExpand = (id) => {\r\n    setExpandedId(expandedId === id ? null : id);\r\n    setAssigningId(null);\r\n  };\r\n\r\n  const handleInputChange = (id, field, value) => {\r\n    setEditedData((prev) => ({\r\n      ...prev,\r\n      [id]: { ...prev[id], [field]: value },\r\n    }));\r\n  };\r\n\r\n  const handleSave = async (id) => {\r\n    try {\r\n      setSaving(true);\r\n      const payload = { id, ...editedData[id] };\r\n      const res = await fetch(getApiUrl(\"update-inhouse-brand.php\"), {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(payload),\r\n      });\r\n      const result = await res.json();\r\n\r\n      if (res.ok && result.success) {\r\n        alert(result.message || \"Saved successfully\");\r\n        setInquiries(\r\n          inquiries.map((inq) =>\r\n            inq.id === id ? { ...inq, ...editedData[id] } : inq\r\n          )\r\n        );\r\n        setEditedData((prev) => {\r\n          const copy = { ...prev };\r\n          delete copy[id];\r\n          return copy;\r\n        });\r\n      } else {\r\n        alert(result.message || \"Failed to save data\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Save error:\", err);\r\n      alert(\"Something went wrong while saving.\");\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  // ===== Dropdown Fetchers =====\r\n  useEffect(() => {\r\n    const fetchMasterCategories = async () => {\r\n      try {\r\n        const res = await fetch(getApiUrl(\"get-master-category.php\"));\r\n        const data = await res.json();\r\n        if (Array.isArray(data)) {\r\n          setMasterCategories(data.filter((cat) => cat.is_deleted === \"0\"));\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error fetching master categories:\", err);\r\n      }\r\n    };\r\n    fetchMasterCategories();\r\n  }, []);\r\n\r\n  const fetchCategories = async (masCatId) => {\r\n    if (!masCatId || categories[masCatId]) return categories[masCatId] || [];\r\n    try {\r\n      const res = await fetch(getApiUrl(\r\n        `get-category.php?mas_cat_id=${masCatId}`\r\n      ));\r\n      const data = await res.json();\r\n      setCategories((prev) => ({ ...prev, [masCatId]: data }));\r\n      return data;\r\n    } catch (err) {\r\n      console.error(\"Error fetching categories:\", err);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const fetchSubCategories = async (catId) => {\r\n    if (!catId || subCategories[catId]) return;\r\n    try {\r\n      const res = await fetch(getApiUrl(\r\n        `get-sub-category.php?cat_id=${catId}`\r\n      ));\r\n      const data = await res.json();\r\n      setSubCategories((prev) => ({ ...prev, [catId]: data }));\r\n    } catch (err) {\r\n      console.error(\"Error fetching subcategories:\", err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchAllDropdownData = async () => {\r\n      if (expandedId) {\r\n        const currentInquiry = inquiries.find((inq) => inq.id === expandedId);\r\n        if (currentInquiry && currentInquiry.masterCategory) {\r\n          const master = masterCategories.find(\r\n            (m) => m.mas_cat_name === currentInquiry.masterCategory\r\n          );\r\n          if (master) {\r\n            const fetchedCategories = await fetchCategories(master.mas_cat_id);\r\n            if (currentInquiry.category) {\r\n              const category = fetchedCategories.find(\r\n                (c) => c.cat_name === currentInquiry.category\r\n              );\r\n              if (category) await fetchSubCategories(category.cat_id);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    };\r\n    fetchAllDropdownData();\r\n  }, [expandedId, inquiries, masterCategories]);\r\n\r\n  const renderEditableField = (id, key, value) => {\r\n    const currentValue = editedData[id]?.[key] ?? value ?? \"\";\r\n\r\n    if (key.toLowerCase().includes(\"date\")) {\r\n      return (\r\n        <input\r\n          type=\"date\"\r\n          value={currentValue}\r\n          onChange={(e) => handleInputChange(id, key, e.target.value)}\r\n        />\r\n      );\r\n    }\r\n    if (key.toLowerCase().includes(\"time\")) {\r\n      return (\r\n        <input\r\n          type=\"time\"\r\n          value={currentValue}\r\n          onChange={(e) => handleInputChange(id, key, e.target.value)}\r\n        />\r\n      );\r\n    }\r\n    if (key === \"product\") {\r\n      return (\r\n        <select\r\n          value={currentValue}\r\n          onChange={(e) => handleInputChange(id, key, e.target.value)}\r\n        >\r\n          <option value=\"\">Select Product</option>\r\n          {productOptions.map((option) => (\r\n            <option key={option.id} value={option.name}>\r\n              {option.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n    }\r\n    if (key === \"stage\") {\r\n      return (\r\n        <select\r\n          value={currentValue}\r\n          onChange={(e) => handleInputChange(id, key, e.target.value)}\r\n        >\r\n          <option value=\"\">Select Stage</option>\r\n          {stageOptions.map((stage) => (\r\n            <option key={stage} value={stage}>\r\n              {stage}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n    }\r\n    if (key === \"status\") {\r\n      return (\r\n        <select\r\n          value={currentValue}\r\n          onChange={(e) => handleInputChange(id, key, e.target.value)}\r\n        >\r\n          <option value=\"\">Select Status</option>\r\n          {statusOptions.map((status) => (\r\n            <option key={status} value={status}>\r\n              {status}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n    }\r\n\r\n    if (key === \"masterCategory\") {\r\n      return (\r\n        <select\r\n          value={currentValue}\r\n          onChange={(e) => {\r\n            const selectedName = e.target.value;\r\n            const selected = masterCategories.find(\r\n              (cat) => cat.mas_cat_name === selectedName\r\n            );\r\n            handleInputChange(id, key, selectedName);\r\n            handleInputChange(id, \"category\", \"\");\r\n            handleInputChange(id, \"subCategory\", \"\");\r\n            if (selected) fetchCategories(selected.mas_cat_id);\r\n          }}\r\n        >\r\n          <option value=\"\">Select Master Category</option>\r\n          {masterCategories.map((cat) => (\r\n            <option key={cat.mas_cat_id} value={cat.mas_cat_name}>\r\n              {cat.mas_cat_name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n    }\r\n\r\n    if (key === \"category\") {\r\n      const masterName =\r\n        editedData[id]?.masterCategory ||\r\n        inquiries.find((inq) => inq.id === id)?.masterCategory ||\r\n        \"\";\r\n      const master = masterCategories.find((m) => m.mas_cat_name === masterName);\r\n      const categoryList = master ? categories[master.mas_cat_id] || [] : [];\r\n\r\n      return (\r\n        <select\r\n          value={currentValue}\r\n          onChange={(e) => {\r\n            const selectedName = e.target.value;\r\n            const selected = categoryList.find(\r\n              (cat) => cat.cat_name === selectedName\r\n            );\r\n            handleInputChange(id, key, selectedName);\r\n            handleInputChange(id, \"subCategory\", \"\");\r\n            if (selected) fetchSubCategories(selected.cat_id);\r\n          }}\r\n          disabled={!master}\r\n        >\r\n          <option value=\"\">Select Category</option>\r\n          {categoryList.map((cat) => (\r\n            <option key={cat.cat_id} value={cat.cat_name}>\r\n              {cat.cat_name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n    }\r\n\r\n    if (key === \"subCategory\") {\r\n      const categoryName =\r\n        editedData[id]?.category ||\r\n        inquiries.find((inq) => inq.id === id)?.category ||\r\n        \"\";\r\n      const masterName =\r\n        editedData[id]?.masterCategory ||\r\n        inquiries.find((inq) => inq.id === id)?.masterCategory ||\r\n        \"\";\r\n\r\n      const master = masterCategories.find((m) => m.mas_cat_name === masterName);\r\n      const categoryList = master ? categories[master.mas_cat_id] || [] : [];\r\n      const category = categoryList.find((c) => c.cat_name === categoryName);\r\n      const subCatList = category ? subCategories[category.cat_id] || [] : [];\r\n\r\n      return (\r\n        <select\r\n          value={currentValue}\r\n          onChange={(e) => handleInputChange(id, key, e.target.value)}\r\n          disabled={!category}\r\n        >\r\n          <option value=\"\">Select Subcategory</option>\r\n          {subCatList.map((sub) => (\r\n            <option key={sub.subcat_id} value={sub.subcat_name}>\r\n              {sub.subcat_name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <input\r\n        type=\"text\"\r\n        value={currentValue}\r\n        onChange={(e) => handleInputChange(id, key, e.target.value)}\r\n      />\r\n    );\r\n  };\r\n\r\n  // ===== Assign Feature =====\r\n  const handleAssignClick = async (id) => {\r\n    setAssigningId(id);\r\n    setSelectedUser(\"\");\r\n    try {\r\n      const res = await fetch(getApiUrl(\"get-user-name.php\"));\r\n      const result = await res.json();\r\n      if (result.success) {\r\n        setUserList(result.data);\r\n      } else {\r\n        alert(\"Failed to fetch users\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Assign fetch error:\", err);\r\n      alert(\"Error fetching users\");\r\n    }\r\n  };\r\n\r\n  const handleConfirmAssign = async () => {\r\n    if (!selectedUser) return alert(\"Please select a user first\");\r\n    try {\r\n      setAssigning(true);\r\n      const payload = { inquiry_id: assigningId, user_id: selectedUser };\r\n      const res = await fetch(getApiUrl(\"assign-inquiry.php\"), {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(payload),\r\n      });\r\n      const result = await res.json();\r\n\r\n      if (res.ok && result.success) {\r\n        alert(result.message || \"Assigned successfully\");\r\n        setInquiries(\r\n          inquiries.map((inq) =>\r\n            inq.id === assigningId ? { ...inq, assignedUserId: selectedUser } : inq\r\n          )\r\n        );\r\n        setAssigningId(null);\r\n        setSelectedUser(\"\");\r\n      } else alert(result.message || \"Failed to assign\");\r\n    } catch (err) {\r\n      console.error(\"Assign error:\", err);\r\n      alert(\"Something went wrong while assigning.\");\r\n    } finally {\r\n      setAssigning(false);\r\n    }\r\n  };\r\n\r\n  // ===== File Upload =====\r\n  const handleFileChange = (e) => setFile(e.target.files[0]);\r\n  const handleUpload = async () => {\r\n    if (!file) return alert(\"Please select an Excel file first.\");\r\n    try {\r\n      setUploading(true);\r\n      const formData = new FormData();\r\n      formData.append(\"file\", file);\r\n\r\n      const res = await fetch(getApiUrl(\"upload-inhouse-brands.php\"), {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      const result = await res.json();\r\n      alert(result.message);\r\n\r\n      if (result.success) {\r\n        const userId = localStorage.getItem(\"adminId\");\r\n        const res2 = await fetch(getApiUrl(`get-inhouse-brands.php?user_id=${userId}`));\r\n        const data = await res2.json();\r\n        setInquiries(data);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Upload error:\", err);\r\n      alert(\"Error uploading file.\");\r\n    } finally {\r\n      setUploading(false);\r\n      setFile(null);\r\n    }\r\n  };\r\n\r\n  // ===== Initial Fetch Inquiries =====\r\n  useEffect(() => {\r\n    const fetchInquiries = async () => {\r\n      try {\r\n        const userId = localStorage.getItem(\"adminId\");\r\n        const res = await fetch(getApiUrl(`get-inhouse-brands.php?user_id=${userId}`));\r\n        const data = await res.json();\r\n        setInquiries(data);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        setError(\"Failed to fetch inquiries.\");\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchInquiries();\r\n  }, []);\r\n\r\n  // ===== Pagination Logic (Simplified) =====\r\n  const totalPages = Math.ceil(inquiries.length / itemsPerPage);\r\n  const startIndex = (currentPage - 1) * itemsPerPage;\r\n  const paginatedData = inquiries.slice(startIndex, startIndex + itemsPerPage);\r\n\r\n  // New, simple function to generate page numbers\r\n  const getPaginationNumbers = () => {\r\n    const pages = [];\r\n    for (let i = 1; i <= totalPages; i++) {\r\n      pages.push(i);\r\n    }\r\n    return pages;\r\n  };\r\n  \r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <Sidebar />\r\n      <div className=\"main-content\">\r\n        <h2 className=\"table-title\">Inhouse Brands</h2>\r\n\r\n        {localStorage.getItem(\"adminId\") === \"1\" && (\r\n          <div className=\"upload-box\">\r\n            <input type=\"file\" accept=\".xls,.xlsx\" onChange={handleFileChange} />\r\n            <button onClick={handleUpload} disabled={uploading} className=\"upload-btn\">\r\n              {uploading ? \"Uploading...\" : \"Upload Excel\"}\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        {loading && <div className=\"loading\">Loading...</div>}\r\n        {error && <div className=\"error\">{error}</div>}\r\n\r\n        {!loading && !error && (\r\n          <div className=\"table-wrapper\">\r\n            <table className=\"inquiry-table\">\r\n              <thead>\r\n                <tr>\r\n                  <th className=\"id-col\">ID</th>\r\n                  <th>Brand Name</th>\r\n                  <th>Owner Name</th>\r\n                  <th>Contact Person</th>\r\n                  <th className=\"phone-col\">Contact Number</th>\r\n                  <th>Actions</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {paginatedData.map((inquiry) => (\r\n                  <React.Fragment key={inquiry.id}>\r\n                    <tr className={`summary-row ${expandedId === inquiry.id ? \"expanded-row\" : \"\"}`}>\r\n                      <td className=\"id-col\">{inquiry.id}</td>\r\n                      <td>{inquiry.brandName}</td>\r\n                      <td>{inquiry.ownerName}</td>\r\n                      {/* FIX: Use the correct keys from the API */}\r\n                      <td>{inquiry.contactPersonName}</td>\r\n                      <td className=\"phone-col\">{inquiry.contactPersonNumber}</td>\r\n                      <td>\r\n                        <button onClick={() => toggleExpand(inquiry.id)} className=\"expand-btn\">\r\n                          {expandedId === inquiry.id ? \"Hide Details\" : \"View Details\"}\r\n                        </button>\r\n                        {localStorage.getItem(\"adminId\") === \"1\" && (\r\n                          <button onClick={() => handleAssignClick(inquiry.id)} className=\"assign-btn\">\r\n                            Assign\r\n                          </button>\r\n                        )}\r\n                      </td>\r\n                    </tr>\r\n\r\n                    {expandedId === inquiry.id && (\r\n                      <tr className=\"details-row\">\r\n                        <td colSpan=\"6\">\r\n                          <div className=\"details-box\">\r\n                            {assigningId === inquiry.id && userList.length > 0 && (\r\n                              <div className=\"assign-box\">\r\n                                <label>\r\n                                  Assign to:\r\n                                  <select value={selectedUser} onChange={(e) => setSelectedUser(e.target.value)}>\r\n                                    <option value=\"\">Select User</option>\r\n                                    {userList.map((user) => (\r\n                                      <option key={user.id} value={user.id}>\r\n                                        {user.name}\r\n                                      </option>\r\n                                    ))}\r\n                                  </select>\r\n                                </label>\r\n                                <button onClick={handleConfirmAssign} className=\"confirm-btn\" disabled={assigning}>\r\n                                  {assigning ? \"Assigning...\" : \"Confirm\"}\r\n                                </button>\r\n                              </div>\r\n                            )}\r\n\r\n                            <div className=\"details-grid\">\r\n                              {Object.keys(inquiry).map((key) => {\r\n                                // FIX: Exclude the correct keys from the expanded view\r\n                                if ([\"id\", \"brandName\", \"ownerName\", \"contactPerson\", \"contactNumber\"].includes(key)) return null;\r\n                                return (\r\n                                  <div className=\"detail-item\" key={key}>\r\n                                    <label>{key}:</label>\r\n                                    {renderEditableField(inquiry.id, key, inquiry[key])}\r\n                                  </div>\r\n                                );\r\n                              })}\r\n                            </div>\r\n\r\n                            <button className=\"save-btn\" onClick={() => handleSave(inquiry.id)} disabled={saving}>\r\n                              {saving ? \"Saving...\" : \"Save\"}\r\n                            </button>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                    )}\r\n                  </React.Fragment>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n\r\n            {/* ===== Pagination ===== */}\r\n            {totalPages > 1 && (\r\n              <div className=\"pagination\">\r\n                <button\r\n                  onClick={() => setCurrentPage((p) => Math.max(p - 1, 1))}\r\n                  disabled={currentPage === 1}\r\n                >\r\n                  Prev\r\n                </button>\r\n                {/* Use the new, simple getPaginationNumbers function */}\r\n                {getPaginationNumbers().map((page) => (\r\n                  <button\r\n                    key={page}\r\n                    className={currentPage === page ? \"active\" : \"\"}\r\n                    onClick={() => setCurrentPage(page)}\r\n                  >\r\n                    {page}\r\n                  </button>\r\n                ))}\r\n                <button\r\n                  onClick={() => setCurrentPage((p) => Math.min(p + 1, totalPages))}\r\n                  disabled={currentPage === totalPages}\r\n                >\r\n                  Next\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import \"./BrandInquiries.css\";\r\n// import Sidebar from \"./Sidebar\";\r\n// import { getApiUrl } from \"../utils/api\";\r\n\r\n// export default function InvestorInquiryTable() {\r\n//   const [investors, setInvestors] = useState([]);\r\n//   const [expandedId, setExpandedId] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [editId, setEditId] = useState(null);\r\n//   const [editedData, setEditedData] = useState({});\r\n//   const [saving, setSaving] = useState(false);\r\n\r\n//   // Assign feature\r\n//   const [assigningId, setAssigningId] = useState(null);\r\n//   const [users, setUsers] = useState([]);\r\n//   const [selectedUser, setSelectedUser] = useState(\"\");\r\n//   const [assigning, setAssigning] = useState(false);\r\n\r\n//   // Upload Excel\r\n//   const [uploading, setUploading] = useState(false);\r\n\r\n//   const stageOptions = [\r\n//     \"Contacted\",\r\n//     \"Qualified\",\r\n//     \"Disqualified\",\r\n//     \"Working\",\r\n//     \"Prospecting\",\r\n//     \"Negotiation\",\r\n//     \"Closed Won\",\r\n//     \"Closed Lost\",\r\n//   ];\r\n\r\n//   const toggleExpand = (id) => {\r\n//     setExpandedId(expandedId === id ? null : id);\r\n//     setEditId(null);\r\n//     setEditedData({});\r\n//     setAssigningId(null);\r\n//   };\r\n\r\n//   const handleEditClick = (investor) => {\r\n//     setEditId(investor.id);\r\n//     setEditedData({});\r\n//   };\r\n\r\n//   const handleInputChange = (field, value) => {\r\n//     setEditedData((prev) => ({ ...prev, [field]: value }));\r\n//   };\r\n\r\n//   const handleSave = async (id) => {\r\n//     try {\r\n//       setSaving(true);\r\n//       const payload = { id, ...editedData };\r\n//       const res = await fetch(getApiUrl(\"update-inhouse-investor.php\"), {\r\n//         method: \"POST\",\r\n//         headers: { \"Content-Type\": \"application/json\" },\r\n//         body: JSON.stringify(payload),\r\n//       });\r\n//       const result = await res.json();\r\n\r\n//       if (res.ok && result.success) {\r\n//         alert(result.message || \"Saved successfully\");\r\n//         setInvestors(\r\n//           investors.map((inv) => (inv.id === id ? { ...inv, ...editedData } : inv))\r\n//         );\r\n//         setEditId(null);\r\n//         setEditedData({});\r\n//       } else {\r\n//         alert(result.message || \"Failed to save data\");\r\n//       }\r\n//     } catch (err) {\r\n//       console.error(\"Save error:\", err);\r\n//       alert(\"Something went wrong while saving.\");\r\n//     } finally {\r\n//       setSaving(false);\r\n//     }\r\n//   };\r\n\r\n//   const isEditable = (value) => {\r\n//     return value === null || value === \"\" || value === \"0\" || value === 0;\r\n//   };\r\n\r\n//   const renderEditableField = (key, value) => {\r\n//     if (!isEditable(value) && key !== \"stage\") return value || \"N/A\";\r\n\r\n//     if (key === \"stage\") {\r\n//       return (\r\n//         <select\r\n//           value={editedData[key] ?? value ?? \"\"}\r\n//           onChange={(e) => handleInputChange(key, e.target.value)}\r\n//         >\r\n//           <option value=\"\">Select Stage</option>\r\n//           {stageOptions.map((stage) => (\r\n//             <option key={stage} value={stage}>\r\n//               {stage}\r\n//             </option>\r\n//           ))}\r\n//         </select>\r\n//       );\r\n//     }\r\n\r\n//     if (key.toLowerCase().includes(\"date\")) {\r\n//       return (\r\n//         <input\r\n//           type=\"date\"\r\n//           value={editedData[key] ?? \"\"}\r\n//           onChange={(e) => handleInputChange(key, e.target.value)}\r\n//         />\r\n//       );\r\n//     }\r\n\r\n//     if (key.toLowerCase().includes(\"time\")) {\r\n//       return (\r\n//         <input\r\n//           type=\"time\"\r\n//           value={editedData[key] ?? \"\"}\r\n//           onChange={(e) => handleInputChange(key, e.target.value)}\r\n//         />\r\n//       );\r\n//     }\r\n\r\n//     return (\r\n//       <input\r\n//         type=\"text\"\r\n//         value={editedData[key] ?? \"\"}\r\n//         onChange={(e) => handleInputChange(key, e.target.value)}\r\n//       />\r\n//     );\r\n//   };\r\n\r\n//   const fetchUsers = async () => {\r\n//     try {\r\n//       const res = await fetch(getApiUrl(\"get-user-name.php\"));\r\n//       const json = await res.json();\r\n//       setUsers(json.data || []);\r\n//     } catch (err) {\r\n//       console.error(\"Failed to fetch users\", err);\r\n//       setUsers([]);\r\n//     }\r\n//   };\r\n\r\n//   const handleAssignClick = (id) => {\r\n//     setAssigningId(id);\r\n//     setSelectedUser(\"\");\r\n//     fetchUsers();\r\n//   };\r\n\r\n//   const handleConfirmAssign = async () => {\r\n//     if (!selectedUser) {\r\n//       alert(\"Please select a user first\");\r\n//       return;\r\n//     }\r\n//     try {\r\n//       setAssigning(true);\r\n//       const payload = { investor_id: assigningId, user_id: selectedUser };\r\n//       const res = await fetch(getApiUrl(\"assign-inhouse-investor.php\"), {\r\n//         method: \"POST\",\r\n//         headers: { \"Content-Type\": \"application/json\" },\r\n//         body: JSON.stringify(payload),\r\n//       });\r\n//       const result = await res.json();\r\n//       if (res.ok && result.success) {\r\n//         alert(result.message || \"Assigned successfully\");\r\n//         setInvestors(\r\n//           investors.map((inv) =>\r\n//             inv.id === assigningId ? { ...inv, assignedUserId: selectedUser } : inv\r\n//           )\r\n//         );\r\n//         setAssigningId(null);\r\n//         setSelectedUser(\"\");\r\n//       } else {\r\n//         alert(result.message || \"Failed to assign\");\r\n//       }\r\n//     } catch (err) {\r\n//       console.error(\"Assign error:\", err);\r\n//       alert(\"Something went wrong while assigning.\");\r\n//     } finally {\r\n//       setAssigning(false);\r\n//     }\r\n//   };\r\n\r\n//   const fetchInvestors = async () => {\r\n//     try {\r\n//       const userId = localStorage.getItem(\"adminId\") || 0;\r\n//       const res = await fetch(getApiUrl(`get-inhouse-brands.php?user_id=${userId}`));\r\n//       const data = await res.json();\r\n//       setInvestors(data);\r\n//       setLoading(false);\r\n//     } catch (err) {\r\n//       setError(\"Failed to fetch investors.\");\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleExcelUpload = async (e) => {\r\n//     const file = e.target.files[0];\r\n//     if (!file) return;\r\n//     const formData = new FormData();\r\n//     formData.append(\"file\", file);\r\n\r\n//     try {\r\n//       setUploading(true);\r\n//       const res = await fetch(getApiUrl(\"upload-investors-excel.php\"), {\r\n//         method: \"POST\",\r\n//         body: formData,\r\n//       });\r\n//       const result = await res.json();\r\n\r\n//       if (res.ok && result.success) {\r\n//         alert(\"Excel uploaded successfully!\");\r\n//         fetchInvestors(); // Refresh table\r\n//       } else {\r\n//         alert(result.message || \"Upload failed\");\r\n//       }\r\n//     } catch (err) {\r\n//       console.error(\"Excel upload error:\", err);\r\n//       alert(\"Something went wrong while uploading Excel.\");\r\n//     } finally {\r\n//       setUploading(false);\r\n//       e.target.value = \"\"; // reset file input\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchInvestors();\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"dashboard-container\">\r\n//       <Sidebar />\r\n//       <div className=\"main-content\">\r\n//         <h2 className=\"table-title\">Investor Inquiries</h2>\r\n\r\n//         <div style={{ marginBottom: \"15px\" }}>\r\n//           <label className=\"upload-label\">\r\n//             Upload Excel:\r\n//             <input\r\n//               type=\"file\"\r\n//               accept=\".xlsx,.xls\"\r\n//               onChange={handleExcelUpload}\r\n//               disabled={uploading}\r\n//               style={{ marginLeft: \"10px\" }}\r\n//             />\r\n//           </label>\r\n//           {uploading && <span style={{ marginLeft: \"10px\" }}>Uploading...</span>}\r\n//         </div>\r\n\r\n//         {loading && <div className=\"loading\">Loading...</div>}\r\n//         {error && <div className=\"error\">{error}</div>}\r\n\r\n//         {!loading && !error && (\r\n//           <div className=\"table-wrapper\">\r\n//             <table className=\"inquiry-table\">\r\n//               <thead>\r\n//                 <tr>\r\n//                   <th>ID</th>\r\n//                   <th>Name</th>\r\n//                   <th>Contact</th>\r\n//                   <th>Email</th>\r\n//                   <th>Investment Budget</th>\r\n//                   <th>Stage</th>\r\n//                   <th>Actions</th>\r\n//                 </tr>\r\n//               </thead>\r\n//               <tbody>\r\n//                 {investors.map((inv) => (\r\n//                   <React.Fragment key={inv.id}>\r\n//                     <tr className=\"summary-row\">\r\n//                       <td>{inv.id}</td>\r\n//                       <td>{inv.name}</td>\r\n//                       <td>{inv.contact}</td>\r\n//                       <td>{inv.email}</td>\r\n//                       <td>{inv.investment_budget || \"N/A\"}</td>\r\n//                       <td>{inv.stage || \"N/A\"}</td>\r\n//                       <td>\r\n//                         <button\r\n//                           onClick={() => toggleExpand(inv.id)}\r\n//                           className=\"expand-btn\"\r\n//                         >\r\n//                           {expandedId === inv.id ? \"Hide Details\" : \"View Details\"}\r\n//                         </button>\r\n//                         <button\r\n//                           onClick={() => handleEditClick(inv)}\r\n//                           className=\"edit-btn\"\r\n//                           style={{ marginLeft: \"5px\" }}\r\n//                         >\r\n//                           Edit\r\n//                         </button>\r\n//                         {localStorage.getItem(\"adminId\") === \"1\" && (\r\n//                           <button\r\n//                             onClick={() => handleAssignClick(inv.id)}\r\n//                             className=\"assign-btn\"\r\n//                             style={{ marginLeft: \"5px\" }}\r\n//                           >\r\n//                             Assign\r\n//                           </button>\r\n//                         )}\r\n//                       </td>\r\n//                     </tr>\r\n\r\n//                     {expandedId === inv.id && (\r\n//                       <tr className=\"details-row\">\r\n//                         <td colSpan=\"7\">\r\n//                           <div className=\"details-box\">\r\n//                             {assigningId === inv.id && users.length > 0 && (\r\n//                               <div className=\"assign-box field\">\r\n//                                 <label>\r\n//                                   Assign to:\r\n//                                   <select\r\n//                                     value={selectedUser}\r\n//                                     onChange={(e) => setSelectedUser(e.target.value)}\r\n//                                   >\r\n//                                     <option value=\"\">Select User</option>\r\n//                                     {users.map((user) => (\r\n//                                       <option key={user.id} value={user.id}>\r\n//                                         {user.name}\r\n//                                       </option>\r\n//                                     ))}\r\n//                                   </select>\r\n//                                 </label>\r\n//                                 <button\r\n//                                   onClick={handleConfirmAssign}\r\n//                                   className=\"confirm-btn\"\r\n//                                   disabled={assigning}\r\n//                                   style={{ marginTop: \"10px\" }}\r\n//                                 >\r\n//                                   {assigning ? \"Assigning...\" : \"Confirm\"}\r\n//                                 </button>\r\n//                               </div>\r\n//                             )}\r\n\r\n//                             {editId === inv.id ? (\r\n//                               <>\r\n//                                 {Object.keys(inv).map((key) => {\r\n//                                   if (key === \"id\") return null;\r\n//                                   const value = inv[key];\r\n//                                   return (\r\n//                                     <div key={key} className=\"field\">\r\n//                                       <strong>{key}:</strong>\r\n//                                       {renderEditableField(key, value)}\r\n//                                     </div>\r\n//                                   );\r\n//                                 })}\r\n//                                 <div className=\"field full-width\">\r\n//                                   <button\r\n//                                     onClick={() => handleSave(inv.id)}\r\n//                                     className=\"save-btn\"\r\n//                                     disabled={saving}\r\n//                                   >\r\n//                                     {saving ? \"Saving...\" : \"Save\"}\r\n//                                   </button>\r\n//                                 </div>\r\n//                               </>\r\n//                             ) : (\r\n//                               <>\r\n//                                 <div className=\"field\">\r\n//                                   <strong>Master Category:</strong>\r\n//                                   {inv.masterCategoryName || \"N/A\"}\r\n//                                 </div>\r\n//                                 <div className=\"field\">\r\n//                                   <strong>State / City:</strong>\r\n//                                   {inv.stateName}, {inv.cityName}\r\n//                                 </div>\r\n//                                 <div className=\"field\">\r\n//                                   <strong>Call Date & Time:</strong>\r\n//                                   {inv.call_date || \"N/A\"} {inv.call_time || \"\"}\r\n//                                 </div>\r\n//                                 <div className=\"field\">\r\n//                                   <strong>Call Remark:</strong>\r\n//                                   {inv.call_remark || \"N/A\"}\r\n//                                 </div>\r\n//                                 <div className=\"field\">\r\n//                                   <strong>Meeting Date & Time:</strong>\r\n//                                   {inv.meeting_date || \"N/A\"} {inv.meeting_time || \"\"}\r\n//                                 </div>\r\n//                                 <div className=\"field\">\r\n//                                   <strong>Meeting Remark:</strong>\r\n//                                   {inv.meeting_remark || \"N/A\"}\r\n//                                 </div>\r\n//                                 <div className=\"field\">\r\n//                                   <strong>Final Remark:</strong>\r\n//                                   {inv.final_remark || \"N/A\"}\r\n//                                 </div>\r\n//                               </>\r\n//                             )}\r\n//                           </div>\r\n//                         </td>\r\n//                       </tr>\r\n//                     )}\r\n//                   </React.Fragment>\r\n//                 ))}\r\n//               </tbody>\r\n//             </table>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n"],"names":["InquiryTable","inquiries","setInquiries","useState","expandedId","setExpandedId","loading","setLoading","error","setError","editedData","setEditedData","saving","setSaving","currentPage","setCurrentPage","file","setFile","uploading","setUploading","assigningId","setAssigningId","userList","setUserList","selectedUser","setSelectedUser","assigning","setAssigning","masterCategories","setMasterCategories","categories","setCategories","subCategories","setSubCategories","stageOptions","statusOptions","productOptions","id","name","handleInputChange","field","value","prev","_objectSpread","useEffect","async","res","fetch","getApiUrl","data","json","Array","isArray","filter","cat","is_deleted","err","console","fetchMasterCategories","fetchCategories","masCatId","concat","fetchSubCategories","catId","currentInquiry","find","inq","masterCategory","master","m","mas_cat_name","fetchedCategories","mas_cat_id","category","c","cat_name","cat_id","fetchAllDropdownData","renderEditableField","key","_ref","_editedData$id$key","_editedData$id","currentValue","toLowerCase","includes","_jsx","type","onChange","e","target","_jsxs","children","map","option","stage","status","selectedName","selected","_editedData$id2","_inquiries$find","masterName","categoryList","disabled","_editedData$id3","_inquiries$find2","_editedData$id4","_inquiries$find3","categoryName","subCatList","sub","subcat_name","subcat_id","handleConfirmAssign","alert","payload","inquiry_id","user_id","method","headers","body","JSON","stringify","result","ok","success","message","assignedUserId","userId","localStorage","getItem","fetchInquiries","totalPages","Math","ceil","length","startIndex","paginatedData","slice","className","Sidebar","accept","files","onClick","formData","FormData","append","res2","inquiry","React","brandName","ownerName","contactPersonName","contactPersonNumber","toggleExpand","handleAssignClick","colSpan","user","Object","keys","copy","handleSave","p","max","getPaginationNumbers","pages","i","push","page","min"],"sourceRoot":""}