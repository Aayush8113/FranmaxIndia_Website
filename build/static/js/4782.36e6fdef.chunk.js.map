{"version":3,"file":"static/js/4782.36e6fdef.chunk.js","mappings":"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","sources":["admin/InhouseInvestor.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import \"./DynamicForm.css\";\r\n// import Sidebar from \"./Sidebar\";\r\n// import { getApiUrl } from \"../utils/api\";\r\n\r\n// function InvestorForm() {\r\n//   const [states, setStates] = useState([]);\r\n//   const [cities, setCities] = useState([]);\r\n//   const [masterCategories, setMasterCategories] = useState([]);\r\n//   const [formData, setFormData] = useState({\r\n//     masterCategory: \"\",\r\n//     name: \"\",\r\n//     contact: \"\",\r\n//     email: \"\",\r\n//     state: \"\",\r\n//     city: \"\",\r\n//     investmentBudget: \"\",\r\n//     callDate: \"\",\r\n//     callTime: \"\",\r\n//     callRemark: \"\",\r\n//     meetingDate: \"\",\r\n//     meetingTime: \"\",\r\n//     meetingRemark: \"\",\r\n//     finalRemark: \"\",\r\n//     stage: \"\",\r\n//   });\r\n\r\n//   const investmentOptions = [\"₹1L-5L\", \"₹5L-10L\", \"₹10L-50L\", \"₹50L-1Cr\", \"Above ₹1Cr\"];\r\n//   const stageOptions = [\"Contacted\", \"Qualified\", \"Disqualified\", \"Working\",\"Prospecting\",\"Negotiation\",\"Closed Won\",\"Closed Lost\"];\r\n//   // Load master categories\r\n//   useEffect(() => {\r\n//     axios\r\n//       .get(getApiUrl(\"get-master-category.php\"))\r\n//       .then(res => Array.isArray(res.data) && setMasterCategories(res.data.filter(mc => mc.is_deleted === \"0\")))\r\n//       .catch(err => console.error(\"Error loading master categories:\", err));\r\n//   }, []);\r\n\r\n//   // Load states\r\n//   useEffect(() => {\r\n//     axios\r\n//       .get(getApiUrl(\"get-indian-states.php\"))\r\n//       .then(res => Array.isArray(res.data) && setStates(res.data))\r\n//       .catch(err => console.error(\"Error loading states:\", err));\r\n//   }, []);\r\n\r\n//   // Load cities when state changes\r\n//   useEffect(() => {\r\n//     if (formData.state) {\r\n//       axios\r\n//         .get(getApiUrl(`get-cities.php?state_id=${formData.state}`))\r\n//         .then(res => Array.isArray(res.data) && setCities(res.data))\r\n//         .catch(err => console.error(\"Error loading cities:\", err));\r\n//     } else {\r\n//       setCities([]);\r\n//     }\r\n//     setFormData(prev => ({ ...prev, city: \"\" }));\r\n//   }, [formData.state]);\r\n\r\n//   const handleChange = e => {\r\n//     const { name, value } = e.target;\r\n//     if (name === \"contact\") {\r\n//       setFormData({ ...formData, [name]: value.replace(/[^0-9]/g, \"\") });\r\n//     } else {\r\n//       setFormData({ ...formData, [name]: value });\r\n//     }\r\n//   };\r\n\r\n//   const handleSubmit = e => {\r\n//     e.preventDefault();\r\n//     axios\r\n//       .post(\"http://localhost/react-api/save-inhouse-investors.php\", formData)\r\n//       .then(res => {\r\n//         alert(res.data.message || \"Form submitted successfully!\");\r\n//         setFormData({\r\n//           masterCategory: \"\",\r\n//           name: \"\", contact: \"\", email: \"\", state: \"\", city: \"\",\r\n//           investmentBudget: \"\", callDate: \"\", callTime: \"\", callRemark: \"\",\r\n//           meetingDate: \"\", meetingTime: \"\", meetingRemark: \"\",\r\n//           finalRemark: \"\", stage: \"\",\r\n//         });\r\n//       })\r\n//       .catch(err => {\r\n//         console.error(\"Error submitting form:\", err);\r\n//         alert(\"Failed to submit form, please try again.\");\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <Sidebar />\r\n//       <div className=\"form-wrapper\">\r\n//         <h2>Investor Form</h2>\r\n//         <form onSubmit={handleSubmit} className=\"form-grid\">\r\n\r\n//           {/* Master Category */}\r\n//           <label>Master Category</label>\r\n//           <select name=\"masterCategory\" value={formData.masterCategory} onChange={handleChange} required>\r\n//             <option value=\"\">Select Master Category</option>\r\n//             {masterCategories.map(mc => (\r\n//               <option key={mc.mas_cat_id} value={mc.mas_cat_id}>{mc.mas_cat_name}</option>\r\n//             ))}\r\n//           </select>\r\n\r\n//           <label>Name</label>\r\n//           <input type=\"text\" name=\"name\" value={formData.name} onChange={handleChange} required />\r\n\r\n//           <label>Contact</label>\r\n//           <input type=\"text\" name=\"contact\" value={formData.contact} onChange={handleChange} required />\r\n\r\n//           <label>Email</label>\r\n//           <input type=\"email\" name=\"email\" value={formData.email} onChange={handleChange} required />\r\n\r\n//           <label>State</label>\r\n//           <select name=\"state\" value={formData.state} onChange={handleChange} required>\r\n//             <option value=\"\">Select State</option>\r\n//             {states.map(s => <option key={s.id} value={s.id}>{s.name}</option>)}\r\n//           </select>\r\n\r\n//           <label>City</label>\r\n//           <select name=\"city\" value={formData.city} onChange={handleChange} required>\r\n//             <option value=\"\">Select City</option>\r\n//             {cities.map(c => <option key={c.id} value={c.id}>{c.name}</option>)}\r\n//           </select>\r\n\r\n//           <label>Investment Budget</label>\r\n//           <select name=\"investmentBudget\" value={formData.investmentBudget} onChange={handleChange}>\r\n//             <option value=\"\">Select Budget</option>\r\n//             {investmentOptions.map((b, i) => <option key={i} value={b}>{b}</option>)}\r\n//           </select>\r\n\r\n//           <label>Call Date</label>\r\n//           <input type=\"date\" name=\"callDate\" value={formData.callDate} onChange={handleChange} />\r\n\r\n//           <label>Call Time</label>\r\n//           <input type=\"time\" name=\"callTime\" value={formData.callTime} onChange={handleChange} />\r\n\r\n//           <label>Call Remark</label>\r\n//           <textarea name=\"callRemark\" value={formData.callRemark} onChange={handleChange}></textarea>\r\n\r\n//           <label>Meeting Date</label>\r\n//           <input type=\"date\" name=\"meetingDate\" value={formData.meetingDate} onChange={handleChange} />\r\n\r\n//           <label>Meeting Time</label>\r\n//           <input type=\"time\" name=\"meetingTime\" value={formData.meetingTime} onChange={handleChange} />\r\n\r\n//           <label>Meeting Remark</label>\r\n//           <textarea name=\"meetingRemark\" value={formData.meetingRemark} onChange={handleChange}></textarea>\r\n\r\n//           <label>Final Remark</label>\r\n//           <textarea name=\"finalRemark\" value={formData.finalRemark} onChange={handleChange}></textarea>\r\n\r\n//           <label>Stage</label>\r\n//           <select name=\"stage\" value={formData.stage} onChange={handleChange} required>\r\n//             <option value=\"\">Select Stage</option>\r\n//             {stageOptions.map((s, i) => <option key={i} value={s}>{s}</option>)}\r\n//           </select>\r\n\r\n//           <button type=\"submit\" className=\"submit-btn\">Submit</button>\r\n//         </form>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default InvestorForm;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./DynamicForm.css\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport { getApiUrl } from \"../utils/api\";\r\n\r\nfunction InvestorForm() {\r\n  const [states, setStates] = useState([]);\r\n  const [cities, setCities] = useState([]);\r\n  const [masterCategories, setMasterCategories] = useState([]);\r\n  const [formData, setFormData] = useState({\r\n    masterCategory: \"\",\r\n    name: \"\",\r\n    contact: \"\",\r\n    email: \"\",\r\n    state: \"\",\r\n    city: \"\",\r\n    investmentBudget: \"\",\r\n    callDate: \"\",\r\n    callTime: \"\",\r\n    callRemark: \"\",\r\n    meetingDate: \"\",\r\n    meetingTime: \"\",\r\n    meetingRemark: \"\",\r\n    finalRemark: \"\",\r\n    stage: \"\",\r\n  });\r\n\r\n  const investmentOptions = [\r\n    \"₹1L-5L\",\r\n    \"₹5L-10L\",\r\n    \"₹10L-50L\",\r\n    \"₹50L-1Cr\",\r\n    \"Above ₹1Cr\",\r\n  ];\r\n  const stageOptions = [\r\n    \"Contacted\",\r\n    \"Qualified\",\r\n    \"Disqualified\",\r\n    \"Working\",\r\n    \"Prospecting\",\r\n    \"Negotiation\",\r\n    \"Closed Won\",\r\n    \"Closed Lost\",\r\n  ];\r\n\r\n  // Load master categories\r\n  useEffect(() => {\r\n    axios\r\n      .get(getApiUrl(\"get-master-category.php\"))\r\n      .then(\r\n        (res) =>\r\n          Array.isArray(res.data) &&\r\n          setMasterCategories(res.data.filter((mc) => mc.is_deleted === \"0\"))\r\n      )\r\n      .catch((err) =>\r\n        console.error(\"Error loading master categories:\", err)\r\n      );\r\n  }, []);\r\n\r\n  // Load states\r\n  useEffect(() => {\r\n    axios\r\n      .get(getApiUrl(\"get-indian-states.php\"))\r\n      .then((res) => Array.isArray(res.data) && setStates(res.data))\r\n      .catch((err) => console.error(\"Error loading states:\", err));\r\n  }, []);\r\n\r\n  // Load cities when state changes\r\n  useEffect(() => {\r\n    if (formData.state) {\r\n      axios\r\n        .get(getApiUrl(`get-cities.php?state_id=${formData.state}`))\r\n        .then((res) => Array.isArray(res.data) && setCities(res.data))\r\n        .catch((err) => console.error(\"Error loading cities:\", err));\r\n    } else {\r\n      setCities([]);\r\n    }\r\n    setFormData((prev) => ({ ...prev, city: \"\" }));\r\n  }, [formData.state]);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (name === \"contact\") {\r\n      setFormData({ ...formData, [name]: value.replace(/[^0-9]/g, \"\") });\r\n    } else {\r\n      setFormData({ ...formData, [name]: value });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    axios\r\n      .post(getApiUrl(\"save-inhouse-investors.php\"), formData) // ✅ now using getApiUrl\r\n      .then((res) => {\r\n        alert(res.data.message || \"Form submitted successfully!\");\r\n        setFormData({\r\n          masterCategory: \"\",\r\n          name: \"\",\r\n          contact: \"\",\r\n          email: \"\",\r\n          state: \"\",\r\n          city: \"\",\r\n          investmentBudget: \"\",\r\n          callDate: \"\",\r\n          callTime: \"\",\r\n          callRemark: \"\",\r\n          meetingDate: \"\",\r\n          meetingTime: \"\",\r\n          meetingRemark: \"\",\r\n          finalRemark: \"\",\r\n          stage: \"\",\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"Error submitting form:\", err);\r\n        alert(\"Failed to submit form, please try again.\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Sidebar />\r\n      <div className=\"form-wrapper\">\r\n        <h2>Investor Form</h2>\r\n        <form onSubmit={handleSubmit} className=\"form-grid\">\r\n          {/* Master Category */}\r\n          <label>Master Category</label>\r\n          <select\r\n            name=\"masterCategory\"\r\n            value={formData.masterCategory}\r\n            onChange={handleChange}\r\n            required\r\n          >\r\n            <option value=\"\">Select Master Category</option>\r\n            {masterCategories.map((mc) => (\r\n              <option key={mc.mas_cat_id} value={mc.mas_cat_id}>\r\n                {mc.mas_cat_name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n\r\n          <label>Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={formData.name}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n\r\n          <label>Contact</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"contact\"\r\n            value={formData.contact}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n\r\n          <label>Email</label>\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            value={formData.email}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n\r\n          <label>State</label>\r\n          <select\r\n            name=\"state\"\r\n            value={formData.state}\r\n            onChange={handleChange}\r\n            required\r\n          >\r\n            <option value=\"\">Select State</option>\r\n            {states.map((s) => (\r\n              <option key={s.id} value={s.id}>\r\n                {s.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n\r\n          <label>City</label>\r\n          <select\r\n            name=\"city\"\r\n            value={formData.city}\r\n            onChange={handleChange}\r\n            required\r\n          >\r\n            <option value=\"\">Select City</option>\r\n            {cities.map((c) => (\r\n              <option key={c.id} value={c.id}>\r\n                {c.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n\r\n          <label>Investment Budget</label>\r\n          <select\r\n            name=\"investmentBudget\"\r\n            value={formData.investmentBudget}\r\n            onChange={handleChange}\r\n          >\r\n            <option value=\"\">Select Budget</option>\r\n            {investmentOptions.map((b, i) => (\r\n              <option key={i} value={b}>\r\n                {b}\r\n              </option>\r\n            ))}\r\n          </select>\r\n\r\n          <label>Call Date</label>\r\n          <input\r\n            type=\"date\"\r\n            name=\"callDate\"\r\n            value={formData.callDate}\r\n            onChange={handleChange}\r\n          />\r\n\r\n          <label>Call Time</label>\r\n          <input\r\n            type=\"time\"\r\n            name=\"callTime\"\r\n            value={formData.callTime}\r\n            onChange={handleChange}\r\n          />\r\n\r\n          <label>Call Remark</label>\r\n          <textarea\r\n            name=\"callRemark\"\r\n            value={formData.callRemark}\r\n            onChange={handleChange}\r\n          ></textarea>\r\n\r\n          <label>Meeting Date</label>\r\n          <input\r\n            type=\"date\"\r\n            name=\"meetingDate\"\r\n            value={formData.meetingDate}\r\n            onChange={handleChange}\r\n          />\r\n\r\n          <label>Meeting Time</label>\r\n          <input\r\n            type=\"time\"\r\n            name=\"meetingTime\"\r\n            value={formData.meetingTime}\r\n            onChange={handleChange}\r\n          />\r\n\r\n          <label>Meeting Remark</label>\r\n          <textarea\r\n            name=\"meetingRemark\"\r\n            value={formData.meetingRemark}\r\n            onChange={handleChange}\r\n          ></textarea>\r\n\r\n          <label>Final Remark</label>\r\n          <textarea\r\n            name=\"finalRemark\"\r\n            value={formData.finalRemark}\r\n            onChange={handleChange}\r\n          ></textarea>\r\n\r\n          <label>Stage</label>\r\n          <select\r\n            name=\"stage\"\r\n            value={formData.stage}\r\n            onChange={handleChange}\r\n            required\r\n          >\r\n            <option value=\"\">Select Stage</option>\r\n            {stageOptions.map((s, i) => (\r\n              <option key={i} value={s}>\r\n                {s}\r\n              </option>\r\n            ))}\r\n          </select>\r\n\r\n          <button type=\"submit\" className=\"submit-btn\">\r\n            Submit\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default InvestorForm;\r\n"],"names":["states","setStates","useState","cities","setCities","masterCategories","setMasterCategories","formData","setFormData","masterCategory","name","contact","email","state","city","investmentBudget","callDate","callTime","callRemark","meetingDate","meetingTime","meetingRemark","finalRemark","stage","useEffect","axios","get","getApiUrl","then","res","Array","isArray","data","filter","mc","is_deleted","catch","err","console","error","concat","prev","_objectSpread","handleChange","e","value","target","replace","_jsxs","_Fragment","children","_jsx","Sidebar","className","onSubmit","preventDefault","post","alert","message","onChange","required","map","mas_cat_id","mas_cat_name","type","s","id","c","b","i"],"sourceRoot":""}